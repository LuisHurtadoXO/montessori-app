{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\machi\\\\OneDrive\\\\Documents\\\\School-Work\\\\Assignments Fall 2024\\\\CEN3907C\\\\Interactive-Balance-Board-\\\\montessori-app\\\\frontend\\\\src\\\\SystemContext.jsx\",\n  _s = $RefreshSig$();\n// Import necessary modules\nimport React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\n\n// Create the context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SystemContext = /*#__PURE__*/createContext();\nexport const SystemProvider = ({\n  children\n}) => {\n  _s();\n  // Define states\n  const [isSystemOn, setIsSystemOn] = useState(false);\n  // ... other states\n\n  // Fetch initial state from the backend\n  useEffect(() => {\n    axios.get('/api/board').then(response => {\n      const {\n        isSystemOn,\n        areLEDsOn,\n        deviceCount,\n        gameModeSelected\n      } = response.data;\n      setIsSystemOn(isSystemOn);\n      // ... set other states\n    }).catch(error => {\n      console.error('Error fetching board state:', error);\n    });\n  }, []);\n\n  // Function to update the board state in the backend\n  const updateBoardState = updatedState => {\n    axios.post('/api/board/update', updatedState).then(response => {\n      console.log('Board state updated:', response.data);\n    }).catch(error => {\n      console.error('Error updating board state:', error);\n    });\n  };\n\n  // Toggle system on/off\n  const toggleSystem = () => {\n    const newSystemState = !isSystemOn;\n    setIsSystemOn(newSystemState); // Update frontend state\n    updateBoardState({\n      isSystemOn: newSystemState\n    }); // Update backend/database\n  };\n\n  // ... other functions\n\n  return /*#__PURE__*/_jsxDEV(SystemContext.Provider, {\n    value: {\n      isSystemOn,\n      toggleSystem\n      // ... other values\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(SystemProvider, \"ScFvIEolZNrBOOG2u8TVWteWUjE=\");\n_c = SystemProvider;\nexport default SystemContext;\nvar _c;\n$RefreshReg$(_c, \"SystemProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","axios","jsxDEV","_jsxDEV","SystemContext","SystemProvider","children","_s","isSystemOn","setIsSystemOn","get","then","response","areLEDsOn","deviceCount","gameModeSelected","data","catch","error","console","updateBoardState","updatedState","post","log","toggleSystem","newSystemState","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/machi/OneDrive/Documents/School-Work/Assignments Fall 2024/CEN3907C/Interactive-Balance-Board-/montessori-app/frontend/src/SystemContext.jsx"],"sourcesContent":["// Import necessary modules\r\nimport React, { createContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\n// Create the context\r\nconst SystemContext = createContext();\r\n\r\nexport const SystemProvider = ({ children }) => {\r\n  // Define states\r\n  const [isSystemOn, setIsSystemOn] = useState(false);\r\n  // ... other states\r\n\r\n  // Fetch initial state from the backend\r\n  useEffect(() => {\r\n    axios\r\n      .get('/api/board')\r\n      .then((response) => {\r\n        const { isSystemOn, areLEDsOn, deviceCount, gameModeSelected } = response.data;\r\n        setIsSystemOn(isSystemOn);\r\n        // ... set other states\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching board state:', error);\r\n      });\r\n  }, []);\r\n\r\n  // Function to update the board state in the backend\r\n  const updateBoardState = (updatedState) => {\r\n    axios\r\n      .post('/api/board/update', updatedState)\r\n      .then((response) => {\r\n        console.log('Board state updated:', response.data);\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error updating board state:', error);\r\n      });\r\n  };\r\n\r\n  // Toggle system on/off\r\n  const toggleSystem = () => {\r\n    const newSystemState = !isSystemOn;\r\n    setIsSystemOn(newSystemState); // Update frontend state\r\n    updateBoardState({ isSystemOn: newSystemState }); // Update backend/database\r\n  };\r\n\r\n  // ... other functions\r\n\r\n  return (\r\n    <SystemContext.Provider\r\n      value={{\r\n        isSystemOn,\r\n        toggleSystem,\r\n        // ... other values\r\n      }}\r\n    >\r\n      {children}\r\n    </SystemContext.Provider>\r\n  );\r\n};\r\n\r\nexport default SystemContext;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACjE,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,aAAa,gBAAGN,aAAa,CAAC,CAAC;AAErC,OAAO,MAAMO,cAAc,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC9C;EACA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EACnD;;EAEA;EACAC,SAAS,CAAC,MAAM;IACdC,KAAK,CACFS,GAAG,CAAC,YAAY,CAAC,CACjBC,IAAI,CAAEC,QAAQ,IAAK;MAClB,MAAM;QAAEJ,UAAU;QAAEK,SAAS;QAAEC,WAAW;QAAEC;MAAiB,CAAC,GAAGH,QAAQ,CAACI,IAAI;MAC9EP,aAAa,CAACD,UAAU,CAAC;MACzB;IACF,CAAC,CAAC,CACDS,KAAK,CAAEC,KAAK,IAAK;MAChBC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACrD,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAME,gBAAgB,GAAIC,YAAY,IAAK;IACzCpB,KAAK,CACFqB,IAAI,CAAC,mBAAmB,EAAED,YAAY,CAAC,CACvCV,IAAI,CAAEC,QAAQ,IAAK;MAClBO,OAAO,CAACI,GAAG,CAAC,sBAAsB,EAAEX,QAAQ,CAACI,IAAI,CAAC;IACpD,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAK;MAChBC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACrD,CAAC,CAAC;EACN,CAAC;;EAED;EACA,MAAMM,YAAY,GAAGA,CAAA,KAAM;IACzB,MAAMC,cAAc,GAAG,CAACjB,UAAU;IAClCC,aAAa,CAACgB,cAAc,CAAC,CAAC,CAAC;IAC/BL,gBAAgB,CAAC;MAAEZ,UAAU,EAAEiB;IAAe,CAAC,CAAC,CAAC,CAAC;EACpD,CAAC;;EAED;;EAEA,oBACEtB,OAAA,CAACC,aAAa,CAACsB,QAAQ;IACrBC,KAAK,EAAE;MACLnB,UAAU;MACVgB;MACA;IACF,CAAE;IAAAlB,QAAA,EAEDA;EAAQ;IAAAsB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACa,CAAC;AAE7B,CAAC;AAACxB,EAAA,CAnDWF,cAAc;AAAA2B,EAAA,GAAd3B,cAAc;AAqD3B,eAAeD,aAAa;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}