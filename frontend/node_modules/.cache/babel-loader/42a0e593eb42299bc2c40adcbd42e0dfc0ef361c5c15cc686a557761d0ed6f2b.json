{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\machi\\\\OneDrive\\\\Documents\\\\School-Work\\\\Assignments Fall 2024\\\\CEN3907C\\\\Interactive-Balance-Board-\\\\montessori-app\\\\frontend\\\\src\\\\SystemContext.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SystemContext = /*#__PURE__*/createContext();\nexport const SystemProvider = ({\n  children\n}) => {\n  _s();\n  const [isSystemOn, setIsSystemOn] = useState(false);\n  const [areLEDsOn, setAreLEDsOn] = useState(false);\n  const [deviceCount, setDeviceCount] = useState(0);\n  const [gameModeSelected, setGameModeSelected] = useState('');\n\n  // Fetch initial state from the backend\n  useEffect(() => {\n    axios.get('/api/board').then(response => {\n      const {\n        isSystemOn,\n        areLEDsOn,\n        deviceCount,\n        gameModeSelected\n      } = response.data;\n      setIsSystemOn(isSystemOn);\n      setAreLEDsOn(areLEDsOn);\n      setDeviceCount(deviceCount);\n      setGameModeSelected(gameModeSelected);\n    }).catch(error => {\n      console.error('Error fetching board state:', error);\n    });\n  }, []);\n  const updateBoardState = updatedState => {\n    axios.post('/api/board/update', updatedState).then(response => {\n      console.log('Board state updated:', response.data);\n    }).catch(error => {\n      console.error('Error updating board state:', error);\n    });\n  };\n  const toggleSystem = () => {\n    const newSystemState = !isSystemOn;\n    setIsSystemOn(newSystemState);\n    updateBoardState({\n      isSystemOn: newSystemState\n    });\n  };\n  const toggleLEDs = () => {\n    if (!isSystemOn) {\n      console.log('System must be on to control LEDs.');\n      return;\n    }\n    const newLEDState = !areLEDsOn;\n    setAreLEDsOn(newLEDState);\n    updateBoardState({\n      areLEDsOn: newLEDState\n    });\n  };\n  const selectGameMode = mode => {\n    setGameModeSelected(mode);\n    updateBoardState({\n      gameModeSelected: mode\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(SystemContext.Provider, {\n    value: {\n      isSystemOn,\n      toggleSystem,\n      areLEDsOn,\n      toggleLEDs,\n      deviceCount,\n      setDeviceCount,\n      gameModeSelected,\n      selectGameMode\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(SystemProvider, \"W+KitZY52qQdnNO07rg8NmcTbQE=\");\n_c = SystemProvider;\nexport default SystemContext;\nvar _c;\n$RefreshReg$(_c, \"SystemProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","axios","jsxDEV","_jsxDEV","SystemContext","SystemProvider","children","_s","isSystemOn","setIsSystemOn","areLEDsOn","setAreLEDsOn","deviceCount","setDeviceCount","gameModeSelected","setGameModeSelected","get","then","response","data","catch","error","console","updateBoardState","updatedState","post","log","toggleSystem","newSystemState","toggleLEDs","newLEDState","selectGameMode","mode","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/machi/OneDrive/Documents/School-Work/Assignments Fall 2024/CEN3907C/Interactive-Balance-Board-/montessori-app/frontend/src/SystemContext.jsx"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst SystemContext = createContext();\r\n\r\nexport const SystemProvider = ({ children }) => {\r\n  const [isSystemOn, setIsSystemOn] = useState(false);\r\n  const [areLEDsOn, setAreLEDsOn] = useState(false);\r\n  const [deviceCount, setDeviceCount] = useState(0);\r\n  const [gameModeSelected, setGameModeSelected] = useState('');\r\n\r\n  // Fetch initial state from the backend\r\n  useEffect(() => {\r\n    axios\r\n      .get('/api/board')\r\n      .then((response) => {\r\n        const { isSystemOn, areLEDsOn, deviceCount, gameModeSelected } = response.data;\r\n        setIsSystemOn(isSystemOn);\r\n        setAreLEDsOn(areLEDsOn);\r\n        setDeviceCount(deviceCount);\r\n        setGameModeSelected(gameModeSelected);\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching board state:', error);\r\n      });\r\n  }, []);\r\n\r\n  const updateBoardState = (updatedState) => {\r\n    axios\r\n      .post('/api/board/update', updatedState)\r\n      .then((response) => {\r\n        console.log('Board state updated:', response.data);\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error updating board state:', error);\r\n      });\r\n  };\r\n\r\n  const toggleSystem = () => {\r\n    const newSystemState = !isSystemOn;\r\n    setIsSystemOn(newSystemState);\r\n    updateBoardState({ isSystemOn: newSystemState });\r\n  };\r\n\r\n  const toggleLEDs = () => {\r\n    if (!isSystemOn) {\r\n      console.log('System must be on to control LEDs.');\r\n      return;\r\n    }\r\n    const newLEDState = !areLEDsOn;\r\n    setAreLEDsOn(newLEDState);\r\n    updateBoardState({ areLEDsOn: newLEDState });\r\n  };\r\n\r\n  const selectGameMode = (mode) => {\r\n    setGameModeSelected(mode);\r\n    updateBoardState({ gameModeSelected: mode });\r\n  };\r\n\r\n  return (\r\n    <SystemContext.Provider\r\n      value={{\r\n        isSystemOn,\r\n        toggleSystem,\r\n        areLEDsOn,\r\n        toggleLEDs,\r\n        deviceCount,\r\n        setDeviceCount,\r\n        gameModeSelected,\r\n        selectGameMode,\r\n      }}\r\n    >\r\n      {children}\r\n    </SystemContext.Provider>\r\n  );\r\n};\r\n\r\nexport default SystemContext;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}